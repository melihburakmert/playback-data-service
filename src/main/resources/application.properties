spring.application.name=playback-data-service
server.port=8082
server.servlet.session.timeout=30m

spotify-auth.client-id=${SPOTIFY_CLIENT_ID}
spotify-auth.client-secret=${SPOTIFY_CLIENT_SECRET}
spotify-auth.redirect-uri=${APP_BASE_URL}/auth/callback
spotify-auth.auth-uri=https://accounts.spotify.com/authorize
spotify-auth.token-uri=https://accounts.spotify.com/api/token
spotify-auth.scope=user-read-private,user-read-recently-played,user-read-email

spotify-service.recently-played-uri=https://api.spotify.com/v1/me/player/recently-played
spotify-service.recently-played-limit=10

spring.cloud.gcp.core.enabled=true
spring.cloud.gcp.pubsub.enabled=true
spring.cloud.gcp.pubsub.publisher.enable-message-ordering=true
spring.cloud.gcp.pubsub.subscriber.executor-threads=1
spring.cloud.gcp.pubsub.subscriber.parallel-pull-count=1

spring.cloud.stream.default-binder=pubsub
spring.cloud.stream.bindingRetryInterval=0

// TODO: These should be consumed by genai
#spring.cloud.function.definition=lyricsConsumer
#spring.cloud.stream.bindings.lyricsConsumer-in-0.destination=lyrics
#spring.cloud.stream.gcp.pubsub.bindings.lyricsConsumer-in-0.consumer.subscriptionName=playbackdataservice-lyrics
#spring.cloud.stream.gcp.pubsub.bindings.lyricsConsumer.consumer.dead-letter-topic=lyrics-dlq
#spring.cloud.stream.gcp.pubsub.bindings.lyricsConsumer.consumer.dead-letter-policy.max-delivery-attempts=5
#
#spring.cloud.stream.gcp.pubsub.default.consumer.auto-create-resources=false
#spring.cloud.stream.gcp.pubsub.default.consumer.max-messages=10
#spring.cloud.stream.gcp.pubsub.default.consumer.batch=enabled
#spring.cloud.stream.gcp.pubsub.default.producer.auto-create-resources=false

# TODO: Rename to playback
publisher-mq.playback-data-topic-name=recently-played-songs